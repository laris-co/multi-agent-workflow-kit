# shellcheck shell=bash

toolkit_dir="$PWD/.agents"
legacy_scripts_dir="$toolkit_dir/scripts"
repo_root="$PWD"

declare -a maw_script_dirs=()

if [[ -d "$legacy_scripts_dir" ]]; then
  maw_script_dirs+=("$legacy_scripts_dir")
fi

if [[ -d "$toolkit_dir" ]]; then
  maw_script_dirs+=("$toolkit_dir")
fi

maw_script_dirs+=("$repo_root")

if [[ ${#maw_script_dirs[@]} -gt 0 ]]; then
  maw_path_dir=""
  for candidate_dir in "${maw_script_dirs[@]}"; do
    if [[ "$candidate_dir" != "$repo_root" ]]; then
      maw_path_dir="$candidate_dir"
      break
    fi
  done

  if [[ -n "$maw_path_dir" ]]; then
    if command -v PATH_add >/dev/null 2>&1; then
      PATH_add "$maw_path_dir"
    else
      if [[ :$PATH: != *":$maw_path_dir:"* ]]; then
        export PATH="$maw_path_dir:$PATH"
      fi
    fi
  fi

  __maw_usage() {
    cat <<'USAGE'
Usage: maw <command> [args]

Commands:
  install | setup    Run setup.sh to provision or refresh agent worktrees
  start              Run start-agents.sh to launch the tmux session
  agents             Run agents.sh to manage worktrees manually
  kill               Run kill-all.sh to terminate tmux sessions by prefix
  send               Run send-commands.sh to broadcast commands to panes
  remove             Run remove.sh to delete agent worktrees
  uninstall          Run uninstall.sh to remove toolkit assets
USAGE
  }

  __maw_find_script() {
    local target=$1
    shift || true

    local -a names=("$target")
    if [[ $target != *.sh ]]; then
      names+=("$target.sh")
    fi

    local name dir
    for name in "${names[@]}"; do
      for dir in "${maw_script_dirs[@]}"; do
        [[ -d "$dir" ]] || continue
        if [[ -f "$dir/$name" ]]; then
          printf '%s\n' "$dir/$name"
          return 0
        fi
      done
    done

    return 1
  }

  __maw_exec() {
    local script_name=$1
    shift || true

    local resolved
    if ! resolved=$(__maw_find_script "$script_name"); then
      echo "Unknown maw command target: $script_name" >&2
      __maw_usage >&2
      return 1
    fi

    command "$resolved" "$@"
  }

  maw() {
    if [[ $# -eq 0 ]]; then
      __maw_usage
      return 1
    fi

    local subcommand=$1
    shift || true

    case "$subcommand" in
      install|setup)
        __maw_exec setup.sh "$@"
        ;;
      start)
        __maw_exec start-agents.sh "$@"
        ;;
      agents)
        __maw_exec agents.sh "$@"
        ;;
      kill)
        __maw_exec kill-all.sh "$@"
        ;;
      send)
        __maw_exec send-commands.sh "$@"
        ;;
      remove)
        __maw_exec remove.sh "$@"
        ;;
      uninstall)
        __maw_exec uninstall.sh "$@"
        ;;
      help|-h|--help)
        __maw_usage
        ;;
      *)
        echo "Unknown maw command: $subcommand" >&2
        __maw_usage >&2
        return 1
        ;;
    esac
  }

  alias maw-start='maw start'
  alias maw-setup='maw install'
  alias maw-agents='maw agents'
  alias maw-kill='maw kill'
  alias maw-send='maw send'
  alias maw-remove='maw remove'
  alias maw-uninstall='maw uninstall'
fi
